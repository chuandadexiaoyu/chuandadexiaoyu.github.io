  以下内容写于2015/02/16,今天刚刚回到了家，这篇文章主要是研究各种语言，而且基于
各种语言的组成框架的进程和IO调度的故事。对，没有看错，首先是各种语言，然后是各种
框架，它们运行时的进程，线程情况，IO调度情况。语言包括比较流行的php，ruby，java，
go，当然还有c。下面一一的介绍语言，框架，这样的顺序介绍下去。首先从ruby开始吧，然后
php。当然之前对ruby，rails的一些东西做过一些研究，在thinkaboutrails里面可以看到。



  ruby，先来说说ruby，ruby是一个解释型语言，用于生产时特别方便的那种语言，它本身
是单进程的语言，支持多线程，但是，注意但是，多线程之间有一个GIL，全局锁，也就是说
说一个ruby线程只有获得了这把锁，才能成为一个活动的线程。
  以下内容写于2015/02/22 下午阴天
  ruby的GIL--全局锁是一个粗粒度锁，然后再刨根问底，就会发现其实一种解释语言
其关键也就是这种语言的解释器；解释器运行起来也就是一个程序，一个程序运行起来，
在内存里面对应的也就是一个进程；那么这个进程其实也会有很多的线程，那么ruby
的GIL其实翻译过来，也就是ruby解释器的一个管理多线程的全局粗粒度锁。而且需要注意
一点，ruby的GIL--全局锁只是一个语言的实现，并不是语言的标准。在C版本的解释器里面
有实现，在jruby版本里面没有实现。
  上面的解释还需要进一步说明，ruby解释器运行起来并不是一个单独的存在，而是需要有
料才能把这道菜炒熟，那么这个料就是用ruby语言写出来的脚本，代码。那么ruby解释器的
GIL全局锁针对的对象其实也就是对这个料里面的各个线程加的一把锁，如果这个料里面
的其中一个线程A准备要对这个料理面的具体对象object-A进行操作，那么这个时候，线程A就
会像这个料询问这把全局锁GIL在哪里，然后料就会去帮忙寻找GIL，然后交给线程A；
接着线程A的一系列操作就会畅通无阻，因为当线程A想要去操作object-B的时候，它就不用
再去问GIL了，因为它已经拥有了GIL。
  那么对于ruby服务器，其实也就出来了ruby服务器翻译出来其实也就是一个用ruby语言写出
来的一个料。


  

  php语言，当然和ruby很类似，是一个解释器，放在服务器里面，每每接收一个请求，
由php-fpm不断的生成新的进程去处理这些个请求。请求处理完成之后，这些个进程也就会被
销毁。
