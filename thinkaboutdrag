我对前端的js能实现很炫酷的技术很痴迷，我会一直持续的关注并且一直研究几个开源的炫酷的js项目。
  这个js项目是“https://github.com/chuandadexiaoyu/draggabilly”。表面上看上去，就是鼠标能够随意拖动一个
浏览器元素，是不是很炫酷！！
  这个项目里面的代码有42kb，具体有1510行代码。开始研究吧。2015.01.27写
  想要研究一个项目的代码，那么需要让这个项目运行起来，才能调试，才能知道具体的调用结构。
从github上面download了代码，直接运行 index.html,发现了“failed to load resource::ERR_FILE_NOT_FOUND”这
个错误，应该是没有依赖的文件，估计是js。然后去文件夹下面找啊找啊，发现果然没有需要的依赖的js文件，具体的去index.html里面看。
于是去google里面搜索需要的js文件，copy到文件夹下。其实推荐的安装方法是bower安装，但是我在
windows下，觉得很麻烦，于是就去copy了js，是不是觉得很笨，但是我最后能运行，^_^。就运行成功了。

  先来看看index.html里面是怎么调用draggabilly的。
  第一句是window.onload = function(){ 有经验的工程师在这里面就需要比较window和document了。
window对象表示浏览器中打开的窗口（包括frame和iframe标签）；document是载入浏览器的html文档
生成的对象，方便我们对html页面中的所有元素进行操作，而且注意哦，document对象是window对象
的一部分，可通过window.document属性访问到。而且去develop.mozilla.org里面查看window.load方法
发现，GlobalEventHandlers.onload，虽然不知道这个和window.load有什么关系，下面还提示了
这个load事件在document load事件处理的结尾启动，此时，所有的对象，比如图像，脚本，链接
和二级的frame都已经加载完成了。
  紧接着就发现了比较典型的调用代码了（别忘了我们是要研究draggabilly的调用的）：
var ex1 = document.getElementById('ex1'); var drag1 = new Draggabilly( ex1 );
这个应该就是调用了,先得到dom div对象，然后利用这个dom div对象，生成Draggabilly类的对象。那么
这个生成的对象就能够在浏览器中自由拖动了，我们可以从这里入手，去探究Draggabilly类是怎么造出来的。
至于其他的高级方法，我们暂时不考虑。
激动把，终于有突破口去看代码了！！
  娘娘的，还好代码的注释比较详细，用的是横线分离出来的。
  在100行的地方，发现了function Draggabilly( element, options ){， 那么就是这里了,最核心的定义就是这里，
其他地方的代码大部分应该是Draggabilly的prototype的扩展，估计高级的详细的方法就是沿深了prototype。深入查看
Draggabilly这个类的定义，会发现3部，1、根据element得到对应的dom元素；2、将options的内容赋值给this.options；(第二点
中用到了extend这个方法，这个方法在不同的库里面有不同的实现，在这里是扩展一个数组,至少我看到的是这样)
3、调用this._create()；

以上内容写于2015/01/27 生命有限。


以下内容写于2015/01/29 生命有限。
  接下来，我们将要进入this._create()方法，看看能得到什么东西,在下面的实现是
Draggabilly.prototype._create() = function(){this.postion={}  ...}
需要注意的是，这里面的this代表的应该是各自具体对象，比如上面的ex1；你觉得呢？
让我们来看看这个_create里面到底做了神馬事情：
  1、startPosition，没错，就是确定startPosition；2、startPoint；3、dragPoint；
  4、设置style.position = 'relative';5、enable()，估计也就是类似于启动的意思，好晕，不就是
  this.isEnabled = true；
  6、setHandles()，这个就不知道是干嘛的了。。，得到的注释是set this.handles and bind start events to 'em,
  表面的意思懂了，设置handles的值以及绑定启动事件在（估计要用到event的一些东西）em上面，在这个方法的一开始
  就给this.handle赋了值；

  继续往下看，发现setHandles里面最后一句话是this.bindHandles(true)，需要注意的是这里的true，应该是
允许绑定的意思，这个方法挺短的，是不是？
  那么bindHandles(true)做了哪儿些工作呢？我们的预想应该是做一些事件的绑定工作。第一步是兼容性，汗，
现在的设备那么多，第一步处理兼容性也是正常，因为不仅仅在PC上面运行，还要兼容移动设备，你敢信，我在
android的浏览器里面可以运行...具体的原理就是根据window.navigator.pointerEnabled或者
window.navigator.msPointerEnabled来进行判断，然后生成对应的binder对象。看到这里，应该明白
了，window.navigator应该是一个浏览器的全局变量。最后调用binder.call(this, handle, isBind)来
处理各种handle。现在的代码才到169行，下面还有7倍的代码要看，好晕。生命有限。
  
  下面内容写于2015/01/30生命有限
  一直在研究这个binder.call(this, handle, isBind)的意义，妹的，打印出来，发现handle是 
<div><div></div></div>，也就是我们要处理的对象啊，听说过一个词，句柄，好像是C++里面的，是不是
可以这么理解，我们这里处理的对象（div）就是句柄handle（代码里面的称呼），所以逻辑就出来了，首先
找到对应的需要处理的对象，句柄，然后给句柄绑定事件（mousedown），这个mousedown是在下面的代码里面
定义的

  以下内容写于2015/02/01 生命真的很有限
  在bindMouseTouch中，实际上调用的是eventie[’bind‘]（handle, 'mousedown', this），在eventie.js
这个文件里面找到了，eventie['bind']这个函数是
  bind = function（ obj， type， fn ）{
    obj.addEventListener( type, fn, false );
  }
  而这里的fn传进来的是神馬，居然是this，this也就是Draggabilly，好晕哦，为什么又传进来一个这个？这是要用
递归吗？现在让我们仔细想想一个问题，这个问题就是，拖动div的时候，div变灰了，但是没有消失，当把鼠标
放开的时候，div又从灰色变成了原来的样子，我们猜测，这整个过程是这样的：
  1、刚开始的时候，状态一
  2、鼠标点击的时候，状态二
  3、鼠标放开的时候，状态一
那么估计状态二就对应着一个Draggabilly，这仅仅是猜测。
  回到bind = function（ obj， type， fn ），我们希望这里的fn应该是一个关于mousedown处理的函数。
  确实是这样的，在console里面打印出来，发现最后确实调用了onmousedown,同时也说明了一个事实：
传入一个obj.addEventListener( type, fn, false )，当fn是一个object的时候，而不是一个对象的时候，
也是可以的。然后去网上搜索“ js addEventListener second arg”，果然，在
http://thecssnigja.com/javascript/handleevent中，有了详细的说明，会直接去找object里面的
handleEvent（event）方法，同时构造event传进去。果然，在文件里面搜索到了handleEvent这个方法。
  而且是需要注意的是，是在事件触发之后才会调用handleEvent，可能因为这个时候，才有event吧。
  进入handleEvent后，就会发现，发现是需要on+event.type拼凑出来的。type触发的是onmousedown这个方法，在这个方法里面，会发现最后调用
的是dragStart（ event， event ）这样的一个方法，感觉到这儿，似乎就完结了，其实这里才刚刚进入
主题，需要处理div的一系列事情。
  
  进入dragStart，我们会发现几件事情需要处理：
  1、设置坐标
  2、给当前的this（draggabilly）绑定监听事件：mousemove，mouseup
  3、

