这个项目是理解rails源代码，自从用上rails之后，就一直觉得rails非常的方便，开发效率很高。那么rails的源代码是怎么做到的，是不是还有可以优化的地方，这些东西都值得我每天花时间去研究。2015/1/26 14：01时写

在我的观点看来，rails是一个有能操作数据库特性的工具，一个有处理网络请求特性的工具，具体的网络处理是tcp， http。

1、2015/01/26 rails的整体框架浏览

首先从rails生成的应用APP开始入手，
有以下几个目录
app、bin、config、db、lib、log、public、test、tmp、vendor
有以下几个文件
config.ru、Gemfile、Gemfile.lock、Rakefile、README.rdoc

下面开始从APP的启动开始讲起
  在命令行里面执行 rails s的时候，其实执行的是/usr/local/rvm/gems/ruby-2.1.2/bin/rails这个脚本，
这个脚本是ruby脚本。而这个脚本的注释有这么一句：“ # The application 'railties' is installed as part of a gem, and this file is here to facilitate（方便） running it”
这句话其实就暗示了这个文本最终的执行在‘’railties‘里面，过不起然，
最后两句“gem 'railties', version” “load Gem.bin_path('railties', 'rails', version)” 就是执行了这个作用。 
打印 “Gem.bin_path('railties', 'rails', version)”就可以得到 "/usr/local/rvm/gems/ruby-2.1.2/gems/railties-4.2.0/bin/rails"，
所以最终的执行命令or脚本就是“/usr/local/rvm/gems/ruby-2.1.2/gems/railties-4.2.0/bin/rails”。
在这里可以看到rails的层层封装，连个rails的启动都要封装。汗。

  接下来我们去看“/usr/local/rvm/gems/ruby-2.1.2/gems/railties-4.2.0/bin/rails”这个ruby脚本，打开发现比较短，
其中比较有意思的是这两句，“railties_path = File.expand_path('../../lib', __FILE__)”和“$:.unshift(railties_path)”，
前面一句是得到railties_path的路径，得到的是“/usr/local/rvm/gems/ruby-2.1.2/gems/railties-4.2.0/lib/”，这个“lib”里面有rails目录，rails.rb，
然后把这个路径加入到ruby默认的类加载路径前面“$:”。这个文件最后一句就是加载rails模块的cli模块或者类“require \"rails/cli\"”

  接着，我们就去看看“/usr/local/rvm/gems/ruby-2.1.2/gems/railties-4.2.0/lib/rails.rb”这个模块或者类里面的cli被加载进行的一系列操作。jin
经过查询资料，发现 “require”其实是载入代码的实现， “load”是执行文件。那么这里就会载入“rails/cli”类或者模块的实现。那么cli这个文件里面写了啥。
打开发现，里面第一句就是“require ‘rails/app_rails_loadere’” 接下来是一句注释和一句代码“# If we are inside a Rails application this method performs an exec and thus，the rest of this script is not run”和“Rails::AppRailsLoader.exec_app_rails”
也就是说，如果在一个APP里面，那么“Rails。。”后面的代码长的再漂亮也不会执行了。

  那么我们来看看‘rails/app_rails_loader’和“Rails::AppRailsLoader.exec_app_rails”，好激动哦，终于要见到大Boss了。


以下内容写于2015/01/28
  我们接着来看’rails/app_rails_loader’和“Rails::AppRailsLoader.exec_app_rails”

以下内容写于2015/01/29(为什么学习rails源代码，因为五脏俱全)
  在“rails/app_rails_loader”这个文件里面的exec_app_rails方法要执行一系列操作来载入application，而且要注意一点，这里的
代码执行环境是app，而不是gem包，因为段代码是被载入进app里面执行的。看了代码，感觉FILE的方法用到了好多。。而且还有正则，
看来了解以下ruby的FILE对象很有必要啊。FILE.file?(exe)查找一个对象存不存在而且是不是一个文件。最后就找到了文件‘bin/rails’，
找到这个文件的方法，就是判断['bin/rails', 'script/rails']这两个文件，哪个文件存在，而且是文件类型的，
最终执行的语句是 "exec Gem.ruby, 'bin/rails, *ARGV' "， 也就是运行 'bin/rails'这个文件，并且带上参数，这个参数，类似于
C语言里面的argv。那么也就是执行 “bin/rails‘ 这个文件。

  在'bin/rails'这个文件里面，用到了load方法，ruby对于这个方法的解释是"Loads and executes the Ruby program in the file filename."
==> load(filename, wrap=false), 首先load的是spring文件,感觉这个文件跟bundler有关，然后调用了
File.expand得到了APP_PATH = File.expand_path('../../config/application', __FILE__)这个基本的路径,然后require_relative '..config/boot'这个文件，
require_relative==>'Ruby tries to load the library named string relative to the requiring file’s path'
看了文档，知道了require_relative后面接的是相对于当前app的路径。那么也就是载入了config/boot
文件，那么config/boot这一句到底做了什么事情呢，两件事情：1、找到了Gemfile文件的路径；
2、require 'bundler/setup' #Set up gems listed in the Gemfile
总之以上的事情，感觉就是一件事，那就是set up gems。

最后最后一句 require 'rails/commands', ^_^ 最后一句终于来了，这一句话就是启动服务器之类的事情了。

进入rails/commands
  也就是进入到gem包 railties-4.2.0/lib/rails/commands.rb这个文件里面，为什么路径会跑到这儿来，我也不是
很清楚，我在console里面调试，require 'rails/commands'是失败的。
这个commands文件也就是做一件事情，也就是匹配到对应的command_task。
  对了，在这里，我越来越感觉到一件事情，也就是require的文件里面的代码如果是require的脚本，那么就像当于
load，是要被执行的，但如果是一个module或者一个class，那么是不会执行的。
  我们来具体看看‘s’这个选项，也就是server的选项，这也是五脏俱全的地方。
  在这个文件里面的最后最后一句（都多少个最后了。。）
  --》 Rails::CommandsTasks.new(ARGV).run_command!(command)
  看到没有，最终就是执行run_command!('server')
  进入commands/commands_tasks.rb文件,找到run_command!()这个方法,你就会
看到，其实也是我们的预想，也就是不同的命令，会执行不同的方法，和预期一样。
代码里面用到了send('server')这个方法来做到的。下面是send的用法
  send sends a message to an object instance and 
its ancestors in class hierarchy until some method reacts (because its name matches the first argument)
  Note that send bypasses visibility checks, so that you can call private methods, too (useful for unit testing).
  所以调用对象的实例方法（包括祖先继承来的方法都可以的），私有方法也不例外。^_^
 

  接着就找到了def server这个定义来了，终于要启动服务器了，这个不就是rails的核心么？
  启动server可不是一件简单的事情，所谓‘罗马不是一日建成的’也就是这个道理啊。需要的材料有：
application、server、config但不限于此。
  1、这第一件事就是找到合适的application,set_application_directory!
  2、加载对应的命令脚本,require_command!("server"),这个文件里面包含的也就是server类，继承于::Rack::Server
  3、实例化一个server，实例化的过程也就需要配置好server的参数,最最主要的工作就是确定当前的
  环境，还有设置options，参数。在Server的类里面有实例方法，然后require APP_PATH = 'app/config/application'
  得到当前的appliaction,在这里面所用到的技巧，tap这个方法，这个方法是Object的instance_method
  具体的实现是               VALUE
                         rb_obj_tap(VALUE obj)
                         {
                            rb_yield(obj);
                            return obj;
                         }也就是说传入一个obj和block，然后处理这个obj，最后返回这个obj
  比如 [1, 2, 3, 4].tap{|x| x.shift} 里面的‘x’也就是[1, 2, 3, 4]本身         
  紧接着就是require APP_PATH那么，server也就能够拿到application了。
    然后呢，就是Dir.chdir(Rails.application.root)将当前的路径确定为app的路径
  最后的最后，终于启动server了，server.start，当然，没有那么简单的就能启动。

    在启动的时候，首先打印boot信息，然后富有技巧的东西又来了，trap(:INT){exit}
  没见过，我也没见过，文档里面看了一下，高大上的东西！！！信号量，Unix操作系统
  的信号量，也就是遇到“ctrl+c”，就执行 exit命令，呵呵，超神。

    接着就用FileUtil.mkdir_p这个函数创建了临时文件夹（cache，pids，sessions，sockets），
    一个是缓存，进程，会话，端口。
    
    接着就调用super，也就是调用父类的start(rack的server)，看看前面没有什么实质的东西，
    那么在父类的start执行的也就是核心的东西。简单的预想一下，可以考虑到，接下来发生的事情
    会生成一个server守护进程（高大上吧）。
    
    进入super的start方法，然后先不管options的东西，直奔主题，
    1、检查已有的server进程，根据传进来的option[:pid]（不知道option是怎么传进来的）。
    2、执行wrapped_app-->build_app app，注意build_app和app都是方法,当我们走进build_app的时候
    就会发现里面有middleware，也就是中间件，不知道是干神馬的？反正听说过，然后最后的最后的一句，
    也就是产生了@wrapped_app = build_app app。最终发现是build_app_and_options_from_config这个方法
    根据config.ru来生成的。最终生成的东西，在代码中打印出来，是Rack::ContentLength这个东西的对象
    汗！！没有见过的东西
    3、daemonize_app if options[:daemonize]，如果有守护进程的话，那么就创建守护进程
    4、server.run wrapped_app, options, &blk  终于终于到了最后一步了，这会没有骗你。
    这行代码其实运行的是
    @_server ||= Rack::Handler.get(options[:server]) || Rack::Handler.default(options) 
    好晕，怎么又跑到Rack::Handler这个module里面去了！！好吧，又要进入Rack::Handler里面去
    发现一些东西，default方法里面的默认的服务器顺序是 pick ['thin', 'puma', 'webrick'],我也是醉了，
    居然是指定的服务器，估计这三个服务器比较牛逼吧，在这里面最关键的调用了get（server）方法

    以下内容写于2015/01/30生命有限
      别以为到这儿就结束了，还有呢，为了简单和实用起见，当然就用各自的handler把各自的服务器给包装起来，在这里，
    我觉得这些所谓的各自handler应该是对应的服务器gem包为了符合约定，所做出来的。是各自的服务器gem包写出来的哦。
   register 'thin', 'Rack::Handler::Thin',果然，我就发现了猫腻，在这个文件的最下面的代码，就是注册（register），
   其实最终的效果是@handler[:thin] = 'Rack::Handler::Thin'。在这里得到了@handler，那么，在get方法中必须要用到，
   才能发挥作用哦。
     注意到传给@handler[:thin]的是一个字符串，所以在后面会有一些处理，将字符串变成server对象。
     klass.split("::").inject(Object) { |o, x| o.const_get(x) }，当当当当，这个就是得到对应的服务器对象。
   inject的用法，看看    [1, 2, 3, 4].inject(0) { |result, element| result + element } # => 10  就知道了，
   类似于一个递归，还是迭代（我认为是递归）。 最终得到的是一个Rack::Handler::Thin服务器的类。
     
     好吧，我们在上面得到了Server类，那么重点关注以下server.run wrapped_app, options, &blk这句话吧。
  也就是Rack::Handler::Thin.run wrapped_app, options, &blk
     让我们进入/lib/rack/handler/thin.rb这个文件看看所做的事情是什么，这个文件只是一个包装，最最核心的一句话是
  ::Thin::Server.new(*args), args = [host, port, app, options]，上http://stackoverflow.com/questions/3701264/passing-a-hash-to-a-function-args-and-its-meaning
  查询了一下，发现*args的意思是传入一个数组参数，看看最终还是::Thin::Server.new(*args).start

     终于进入到Thin服务器里面了，这个五脏俱全的小麻雀。。
     
     在initialize这个方法里面，其他的我们就不看了（当然是初始化一系列的值，包括但不限于port、host、application）
  ，我们要看的是backend，
    # Try to intelligently select which backend to use.智能的选择backend，是不是高大上 
    @backend = select_backend(host, port, options)  
    对了，backend是神馬，我们都不清楚。下面还有一句：
    @backend.server = self
    
      接下来就是 start这个方法，这个方法里面只有一句话@backend.start { setup_signals if @setup_signals }
    在我们select_backend()方法中，我们得到的是Backends::TcpServer.new(host, port)这个backend
      
      那么最后实际执行的是Backends::TcpServer.new(host, port).start{ setup_signals if @setup_signals }
      而Thin::Backends::TcpServer继承于Thin::Backends::Base
      
      在Base 里面有一句解释:
      # A Backend connects the server to the client. It handles:
      # * connection/disconnection to the server
      # * initialization of the connections
      # * manitoring of the active connections.
      
      所以执行的路径是Backends::-->TcpServer.new
                                -->initialize（包括自己的和父类的）
                                -->start（在自己的没有找到，于是就去父类Base找）
      我比较喜欢用箭头的方式来进行讲解逻辑性，条理性的东西，所以下面的内容也用
    箭头来写。
       -->start
       starter = proc do
         connect
         yield if block_given?
         @running = true
       end
       -->if EventMachine.reactor_running?
            starter.call
          else
            @started_reactor = true
            EventMachine.run(&starter)
          end
         测试发现会进入else里面，也就是执行EventMachine.run(&starter)
       -->EventMachine是eventmachine-1.0.4/gem包里面的类，所以需要研究研究
       EventMachine才能知道结果
         终于进入了服务器的核心了，在EventMachine里面看到了thread的一些东西，似乎
       还有一些线程池的一些东西，好开心的有木有，^_^

  以下内容写于2015/02/01快过年的节奏啊，对于过去的一年，你有什么想说的话，小伙

    对于上面的connect，在源代码里面的解释是connect the server，而且需要注意的是，这个
connect方法是在tcp_server里面的，那么估计其他的server，比如unix_server也会有对应的connect，
其实，其实connect的意思里面包含了start server的意思，这样对于不同的server，启动方式不一样，
所以才可能需要把connect方法放到不同的子server里面去实现。
    在这里，我们关注一下tcp_server里面的connect方法，
    在tcp_server的connect方法里面，只有一句话：
    @signature = EventMachine.start_server(@host, @port, Connection, &method(:initialize_connection))
    
    好吧，其实connect是放在 proc对象里面的，所以并不需要在这里执行，需要在EventMachine.run(&starter)里面
执行，我们就直接进入到EventMachine.run(&starter)里面瞧一瞧
    发现里面主要做了以下几件事情：
    1、停止已有的事件循环
    2、初始化各种（主要是清空）变量（包括启动了一个Process，一个进程哦）
    3、执行initialize_event_machine方法
    4、run_machine方法
    5、写了好多失败的保证代码，汗，也许很有必要。
    
    我们来看看initialize_event_machine和run_machine这两个方法
    找了半天没有找到initialize_event_machine这个方法，话说这个名字也好长哦，
打了半天，然后grep了一下，发现在pure_ruby.rb里面，汗，这个文件里面也有Module EventMachine
上面两个方法就写在这里面，但是，但是，我puts了，发现并不是运行这个文件里面的initialize_event_machine，
应该是另有地方了。在grep的同时，还发现了其他地方的initialize_event_machine,比如
eventmachine-1.0.4/ext/rubyeventmachine.so、eventmachine-1.0.4/ext/rubymain.o

以下内容写于2015/02/02今天是一个双二的日子，有什馬想说的么，只要过的二就行。
  而上面的文件都是ruby的c扩展程序，从ext的文件夹就知道。 调试打印的方法应该用其他的方法。
暂时先留在这里，回过头来看，现在马克一下。
  继续往下看，有意思的是用到了@reactor = Process.pid,得到当前的ruby进程，这个Process是个module;接着
是得到@reactor_thread = Thread.current，得到现在的线程，我也不是很清楚这要做神馬，为神馬又冒出一个
线程；下面就是run_machine,而这个run_machine应该是一个循环的方法，这个方法做的事情，
我猜测是根据客户端的请求，它接受事件并将其分发给已注册的事件处理。
这种模式的好处就是清晰的分离了时间分发和处理事件的应用程序逻辑，而不需引入多线程来把代码复杂化，
的确，我在请求的时候，没有看到新的线程生成。
如果它挂掉了，那么下面的ensure就会被立马执行，ensure里面要做的事情是release_machine，先杀死Process，
然后杀死所有有关的线程。
  
  今天参考了一篇博客文章，专门介绍EventMachine的http://blog.csdn.net/resouer/article/details/7975550
感觉讲的还不错，觉得很有必要继续看其他资料搞懂EventMachine
  
  以下内容写于2015/02/04 02/03因为和小姑娘闹腾，没有写下东西，小姑娘，我爱你。
昨天看了一些EventMachine的一些东西，总结了一下，EventMachine是一个事件驱动，异步IO的服务器，可以说和node
一样，必须有回调，reactor是不能被阻塞的，最最主要的一点，虽然是个gem包，但是这些东西的实现都是直接写的C++
实现，将C++程序编译好后，直接拿给ruby用，估计这样的实现方法，会快很多，因为服务器需要这个速度提升。
 
  逐渐萌生了一个想法，想用EM去实现一个服务器，事件驱动服务器。 

  在javieracero.com/blog/starting-with-eventmachine-iii.com里面发现了一点精辟的讲解
  loop do
    break if stop_was_called?
    trigger_time_based_events
    
    break if stop_was_called?
    select_handles
    
    break if stop_was_called?
    close_dead_connections

   end 
  
  额，看了一圈的资料，总结一下，EM是一个ruby程序，一个拥有C++扩展程序的ruby程序，现在对我来说，
网络服务器的原理还不是很懂，研究下去可能会耗比较长的时间，所以，继续往下看，好了，这一块（服务器）
的源代码研究可以放在单独的一块来研究。
   


  所以，到目前为止，我们能够总结出来一些东西。
  一个请求A，经过层层的网络路径，首先被服务器接收到，然后交给rails application，rails application处理
完成之后，将结果返回给服务器，服务器再返回给客户端。
  而且，自始至终， 服务器和rails application是在同一个进程里面。
  
  以下内容写于2015/02/06
  我们先不管thin服务器是怎么运行的，我们要关心的是，thin服务器是怎么调用rack，怎么把request传给rack
然后rack是怎么包装request，传给rails app的，然后再反过来，response是怎么传给thin服务器的。 

  今天下午一直在调试上面说的东西，终于找到了一些门路，启动的时候，rack这个巨人，左手根据config.ru生成了
rails application，右手拿起thin tcp_server，这个server启动的时候，add_timer(0, _)，一直在监听3000端口，
直到请求到来；
  当请求到来的时候，一直在thin服务器的服务器，会把请求丢给rack，rack接收到request后，包装成ruby的对象，然后
传给rails application，其实也就是调用了call method，然后rails application处理过后，将结果返还给rack，rack再
把接收到的response ruby对象，组装成http的response，返还给thin服务器，thin服务器然后把结果返还给客户端浏览器。
  整个过程就是这样。那么还需要研究的就是thin服务器在接收request的时候的异步同步情况，还有就是
rack和rails application处理请求时的异步同步情况。
