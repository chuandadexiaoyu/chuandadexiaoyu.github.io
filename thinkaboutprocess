以下内容写于 2015/03/02。
  通过一段时间的学习，渐渐的发现，不论是ruby的单进程多线程，还是php的多进程，或者是
js的单进程单线程，这些东西的本质都会在底层的C语言，也就是操作系统中得到体现，
本质决定表现，表象体现本质。通过跟同事的讨论，其他语言（除了C语言）的进程线程关系
其实都是设计思想，他们的基础都是C语言，利用C语言的工具来实现思想。
  基于以上的思考，反过来看看Unix环境高级编程，就突然觉得这本书其实就是“本质”，
想要实现“思想”，就需要掌握这些“本质”，“工具”。
  
  好了，接下来我们从第八章开始讲解
  首先接触的是fork()函数，这是一个系统提供的

以下内容写于 2015/03/03
  昨天很详细的看了fork()的使用方法，觉得这是一个十分重要的函数，比如说在网络
服务程序里面，可以采用这样的方式：父进程A接收到一个请求的时候，会fork一个新的
子进程a1来处理这个请求，然后父进程A会继续去处理其他的请求。这种处理方式
很像PHP处理网络请求时的方式，有木有！！！只是这样的方式不知到要耗多少多少内存
空间。
  
  在操作系统中，进程操作有5大原语--fork、exec、_exit、wait、waitpid
